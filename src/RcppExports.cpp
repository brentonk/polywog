// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// computeExpandMatrix
NumericMatrix computeExpandMatrix(NumericMatrix X, IntegerMatrix poly_terms);
RcppExport SEXP polywog_computeExpandMatrix(SEXP XSEXP, SEXP poly_termsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< IntegerMatrix >::type poly_terms(poly_termsSEXP );
        NumericMatrix __result = computeExpandMatrix(X, poly_terms);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computeMargEff
NumericVector computeMargEff(NumericMatrix X, IntegerMatrix poly_terms, NumericVector coef, LogicalVector coef_is_zero, int xvar_col);
RcppExport SEXP polywog_computeMargEff(SEXP XSEXP, SEXP poly_termsSEXP, SEXP coefSEXP, SEXP coef_is_zeroSEXP, SEXP xvar_colSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< IntegerMatrix >::type poly_terms(poly_termsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type coef(coefSEXP );
        Rcpp::traits::input_parameter< LogicalVector >::type coef_is_zero(coef_is_zeroSEXP );
        Rcpp::traits::input_parameter< int >::type xvar_col(xvar_colSEXP );
        NumericVector __result = computeMargEff(X, poly_terms, coef, coef_is_zero, xvar_col);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computePolyTerms
List computePolyTerms(int degree, int k_expand, int k_lin);
RcppExport SEXP polywog_computePolyTerms(SEXP degreeSEXP, SEXP k_expandSEXP, SEXP k_linSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type degree(degreeSEXP );
        Rcpp::traits::input_parameter< int >::type k_expand(k_expandSEXP );
        Rcpp::traits::input_parameter< int >::type k_lin(k_linSEXP );
        List __result = computePolyTerms(degree, k_expand, k_lin);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// computePredict
List computePredict(NumericMatrix X, IntegerMatrix poly_terms, List coef, bool forPredVals, bool interval, bool bag, double level, bool transform = false);
RcppExport SEXP polywog_computePredict(SEXP XSEXP, SEXP poly_termsSEXP, SEXP coefSEXP, SEXP forPredValsSEXP, SEXP intervalSEXP, SEXP bagSEXP, SEXP levelSEXP, SEXP transformSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP );
        Rcpp::traits::input_parameter< IntegerMatrix >::type poly_terms(poly_termsSEXP );
        Rcpp::traits::input_parameter< List >::type coef(coefSEXP );
        Rcpp::traits::input_parameter< bool >::type forPredVals(forPredValsSEXP );
        Rcpp::traits::input_parameter< bool >::type interval(intervalSEXP );
        Rcpp::traits::input_parameter< bool >::type bag(bagSEXP );
        Rcpp::traits::input_parameter< double >::type level(levelSEXP );
        Rcpp::traits::input_parameter< bool >::type transform(transformSEXP );
        List __result = computePredict(X, poly_terms, coef, forPredVals, interval, bag, level, transform);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
