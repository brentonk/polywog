// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// computeExpandMatrix
NumericMatrix computeExpandMatrix(NumericMatrix X, IntegerMatrix poly_terms);
RcppExport SEXP _polywog_computeExpandMatrix(SEXP XSEXP, SEXP poly_termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type poly_terms(poly_termsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeExpandMatrix(X, poly_terms));
    return rcpp_result_gen;
END_RCPP
}
// computeMargEff
NumericVector computeMargEff(NumericMatrix X, IntegerMatrix poly_terms, NumericVector coef, LogicalVector coef_is_zero, int xvar_col);
RcppExport SEXP _polywog_computeMargEff(SEXP XSEXP, SEXP poly_termsSEXP, SEXP coefSEXP, SEXP coef_is_zeroSEXP, SEXP xvar_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type poly_terms(poly_termsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type coef_is_zero(coef_is_zeroSEXP);
    Rcpp::traits::input_parameter< int >::type xvar_col(xvar_colSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMargEff(X, poly_terms, coef, coef_is_zero, xvar_col));
    return rcpp_result_gen;
END_RCPP
}
// computePolyTerms
List computePolyTerms(int degree, int k_expand, int k_lin);
RcppExport SEXP _polywog_computePolyTerms(SEXP degreeSEXP, SEXP k_expandSEXP, SEXP k_linSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type k_expand(k_expandSEXP);
    Rcpp::traits::input_parameter< int >::type k_lin(k_linSEXP);
    rcpp_result_gen = Rcpp::wrap(computePolyTerms(degree, k_expand, k_lin));
    return rcpp_result_gen;
END_RCPP
}
// computePredict
List computePredict(NumericMatrix X, IntegerMatrix poly_terms, List coef, bool forPredVals, bool interval, bool bag, double level, bool transform);
RcppExport SEXP _polywog_computePredict(SEXP XSEXP, SEXP poly_termsSEXP, SEXP coefSEXP, SEXP forPredValsSEXP, SEXP intervalSEXP, SEXP bagSEXP, SEXP levelSEXP, SEXP transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type poly_terms(poly_termsSEXP);
    Rcpp::traits::input_parameter< List >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< bool >::type forPredVals(forPredValsSEXP);
    Rcpp::traits::input_parameter< bool >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type bag(bagSEXP);
    Rcpp::traits::input_parameter< double >::type level(levelSEXP);
    Rcpp::traits::input_parameter< bool >::type transform(transformSEXP);
    rcpp_result_gen = Rcpp::wrap(computePredict(X, poly_terms, coef, forPredVals, interval, bag, level, transform));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_polywog_computeExpandMatrix", (DL_FUNC) &_polywog_computeExpandMatrix, 2},
    {"_polywog_computeMargEff", (DL_FUNC) &_polywog_computeMargEff, 5},
    {"_polywog_computePolyTerms", (DL_FUNC) &_polywog_computePolyTerms, 3},
    {"_polywog_computePredict", (DL_FUNC) &_polywog_computePredict, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_polywog(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
